#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100
typedef struct {
    char firstName[40];
    char lastName[40];
    char mobileNumber[20];
}c;

void str_to_lower(char *str)
{
    int len = strlen(str);
    int i;
    for(i=0; i<len; i++) {
        str[i] = tolower(str[i]);
    }
}

typedef enum { FIRST_NAME, LAST_NAME, MOBILE_NUMBER } search_t;

c phonebook[MAX_SIZE];
int currentSize = 0;
void addcontact();
void display(int index);
void displayAll();
void search(char *key, search_t type);
void delete_contact(char *first_name);
void readFromFile();
void saveToFile();
void str_to_lower(char *str);

void addcontact()
{
    if(currentSize == MAX_SIZE) {
        puts("Error: phonebook is fulL!");
        return;
    }

    c c;
    printf("Enter First Name: ");
    gets(c.firstName);
    printf("Enter Last Name: ");
    gets(c.lastName);
    printf("Enter Mobile Number: ");
    gets(c.mobileNumber);

    phonebook[currentSize] = c;
    ++currentSize;

    printf("\nContact added.\n");
}

void display(int index)
{
    if(index < 0 || index >= currentSize) {
        puts("Error: invalid index!");
        return;
    }

    c c = phonebook[index];
    printf("First Name: %s\n", c.firstName);
    printf("Last Name : %s\n", c.lastName);
    printf("Mobile No : %s\n", c.mobileNumber);
}

void displayAll()
{
    if(currentSize == 0) {
        puts("Phonebook is empty!");
        return;
    }
    int i;
    for(i=0; i<currentSize; i++) {
        display(i);
        puts("");
    }
}

void search(char *key, search_t type)
{
    int found = 0;
    int i;

    str_to_lower(key);
    char content[41];

    if(type == FIRST_NAME) { // search by first name
        for(i=0; i<currentSize; i++) {

            strcpy(content, phonebook[i].firstName);
            str_to_lower(content);

            if(strcmp(content, key) == 0) {
                display(i);
                found = 1;
            }
        }
    }
    else {
        puts("Error: invalid search type!");
        return;
    }

    if(!found) {
        puts("Not found in the phone book");
    }
}
void delete_contact(char *first_name)
{

    if(currentSize == 0) {
        puts("Phonebook is empty! Nothing to delete!");
        return;
    }

    int i, j;
    int count = 0;
    for(i=0; i<currentSize; i++) {
        if(strcmp(phonebook[i].firstName, first_name) == 0) {
            for(j=i; j<currentSize-1; j++) {
                phonebook[j] = phonebook[j+1];
            }

            strcpy(phonebook[j].firstName, "");
            strcpy(phonebook[j].lastName, "");
            strcpy(phonebook[j].mobileNumber, "");

            currentSize -= 1;
            ++count;
        }
    }
    if(count == 0) {
        puts("No entry deleted");
    }
    else {
        printf("%d entries deleted\n", count);
    }
}

void readFromFile()
{
    FILE *fp;
    if((fp = fopen("phonebook.txt", "rb")) == NULL) {
        puts("Empty Database.");
        return;
    }

    if(fread(&currentSize, sizeof(currentSize), 1, fp) != 1) {
        puts("Error: can't read data!");
        return;
    }

    if(fread(phonebook, sizeof(phonebook), 1, fp) != 1) {
        puts("Error: can't read data!");
        return;
    }

}

void saveToFile()
{
    FILE *fp;
    if( (fp = fopen("phonebook.txt", "wb")) == NULL ) {
        puts("Error: can't create a database file!");
        return;
    }

    if (fwrite(&currentSize, sizeof(currentSize), 1, fp) != 1 ) {
        puts("Error: can't save data!");
        return;
    }

    if(fwrite(phonebook, sizeof(phonebook), 1, fp) != 1) {
        puts("Error: can't save data!");
        return;
    }

    puts("Phonebook saved to file successfully!");
}



void clear();

int main()
{
    readFromFile();
    char selection[41];
    int choice;
    while(1){

        puts("    \n\n......PhoneBook......\n");
        puts("    1. Add a new Contact");
        puts("    2. List of Contacts");
        puts("    3. Search Contact");
        puts("    4. Delete Contact  ");
        puts("    5. Save Database");
        puts("    6. Exit");
        do {
            printf("\n    Enter your choice: ");
            gets(selection);
            choice = atoi(selection);
        } while (choice < 1 || choice > 6);

        switch(choice)
        {
        case 1:
            addcontact();
            clear();
            break;
        case 2:
            displayAll();
            clear();
            break;
        case 3:
            printf("Enter first name to search: ");
            gets(selection);
            search(selection, FIRST_NAME);
            clear();
            break;

        case 4:
            printf("Enter  to delete: ");
            gets(selection);
            delete_contact(selection);
            clear();
            break;
        case 5:
            saveToFile();
            clear();
            break;
        case 6:
            exit(0);
            break;
        default:
            break;
        }
    }
    return 0;
}

void clear()
{
    system("PAUSE"); // press any key to continue..
    system("CLS"); // clear the screen ( linux: clear // turbo C : clrscr )
}
